"""
Telegram –±–æ—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import asyncio
import logging
from pathlib import Path
from datetime import datetime, timedelta
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
import config
from scanner import scanner, ScannerError

logger = logging.getLogger(__name__)

class ScanBot:
    def __init__(self):
        self.application = None
        self.bot = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
            self.bot = self.application.bot
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("scan", self.scan_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("cleanup", self.cleanup_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.unknown_command))
            
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise
    
    def _is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in config.TELEGRAM_CHAT_IDS or not config.TELEGRAM_CHAT_IDS
    
    def _get_main_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üñ®Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="scan"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞", callback_data="status")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã", callback_data="cleanup"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        welcome_text = """üñ®Ô∏è *HP M177fw Scanner Bot*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω–Ω–æ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown',
            reply_markup=self._get_main_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if not self._is_authorized(user_id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        
        if query.data == "scan":
            await self._handle_scan_callback(query)
        elif query.data == "status":
            await self._handle_status_callback(query)
        elif query.data == "cleanup":
            await self._handle_cleanup_callback(query)
        elif query.data == "help":
            await self._handle_help_callback(query)
        elif query.data == "back_to_menu":
            await self._handle_back_to_menu(query)
    
    async def _handle_scan_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = query.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_file = await scanner.scan_document()
            
            if scan_file and scan_file.exists():
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                with open(scan_file, 'rb') as file:
                    await query.message.reply_document(
                        document=file,
                        filename=scan_file.name,
                        caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω\nüïê {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                await query.edit_message_text(
                    "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self._get_main_keyboard()
                )
                
                logger.info(f"–§–∞–π–ª {scan_file.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞.",
                    reply_markup=self._get_main_keyboard()
                )
                
        except ScannerError as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _handle_status_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        user_id = query.from_user.id
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            await query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–µ—Ä–∞
            status = await scanner.get_scanner_status()
            
            status_emoji = {
                "ready": "‚úÖ",
                "not_initialized": "‚ö†Ô∏è",
                "error": "‚ùå"
            }.get(status["status"], "‚ùì")
            
            status_text = f"""{status_emoji} *–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞*

*–°–æ—Å—Ç–æ—è–Ω–∏–µ:* {status["message"]}
*–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* {status.get("device", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
*–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:* {status.get("dpi", config.SCAN_DPI)} DPI
*–†–µ–∂–∏–º:* {status.get("mode", config.SCAN_MODE)}
*–§–æ—Ä–º–∞—Ç:* {status.get("format", config.SCAN_FORMAT)}

*–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–æ–≤:* `{config.SCAN_DIR}`
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:* {len(list(config.SCAN_DIR.glob("*"))) if config.SCAN_DIR.exists() else 0}"""
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
            back_keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            
            await query.edit_message_text(
                status_text, 
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(back_keyboard)
            )
            
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _handle_cleanup_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏"""
        user_id = query.from_user.id
        
        try:
            await query.edit_message_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            
            cleaned_count = await self._cleanup_old_files()
            
            if cleaned_count > 0:
                result_text = f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}"
            else:
                result_text = "‚ú® –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!\n\n–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
            back_keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            
            await query.edit_message_text(
                result_text,
                reply_markup=InlineKeyboardMarkup(back_keyboard)
            )
                
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –æ—á–∏—Å—Ç–∫—É: —É–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _handle_help_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        help_text = f"""üîß *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üñ®Ô∏è *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - —Å–æ–∑–¥–∞–µ—Ç PDF/JPEG —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚Ä¢ üìä *–°—Ç–∞—Ç—É—Å* - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞  
‚Ä¢ üóëÔ∏è *–û—á–∏—Å—Ç–∫–∞* - —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ ‚ùì *–ü–æ–º–æ—â—å* - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.SCAN_DPI} DPI
‚Ä¢ –†–µ–∂–∏–º: {config.SCAN_MODE}
‚Ä¢ –§–æ—Ä–º–∞—Ç: {config.SCAN_FORMAT}

*–ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞:*
‚Ä¢ –§–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ {config.CLEANUP_AFTER_HOURS} —á–∞—Å–æ–≤
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {config.MAX_FILE_SIZE_MB} –ú–ë

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
1. –í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä
2. –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫ —Å–µ—Ç–∏ Wi-Fi
3. –ù–µ—Ç –ª–∏ –±—É–º–∞–≥–∏ –≤ –ª–æ—Ç–∫–µ"""
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
        back_keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        await query.edit_message_text(
            help_text, 
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(back_keyboard)
        )
    
    async def _handle_back_to_menu(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        await query.edit_message_text(
            "üñ®Ô∏è *HP M177fw Scanner Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=self._get_main_keyboard()
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        help_text = f"""üîß *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üñ®Ô∏è *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - —Å–æ–∑–¥–∞–µ—Ç PDF/JPEG —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚Ä¢ üìä *–°—Ç–∞—Ç—É—Å* - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞  
‚Ä¢ üóëÔ∏è *–û—á–∏—Å—Ç–∫–∞* - —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ ‚ùì *–ü–æ–º–æ—â—å* - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.SCAN_DPI} DPI
‚Ä¢ –†–µ–∂–∏–º: {config.SCAN_MODE}
‚Ä¢ –§–æ—Ä–º–∞—Ç: {config.SCAN_FORMAT}

*–ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞:*
‚Ä¢ –§–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ {config.CLEANUP_AFTER_HOURS} —á–∞—Å–æ–≤
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {config.MAX_FILE_SIZE_MB} –ú–ë

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
1. –í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä
2. –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫ —Å–µ—Ç–∏ Wi-Fi
3. –ù–µ—Ç –ª–∏ –±—É–º–∞–≥–∏ –≤ –ª–æ—Ç–∫–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /scan, /status, /cleanup"""
        
        await update.message.reply_text(
            help_text, 
            parse_mode='Markdown',
            reply_markup=self._get_main_keyboard()
        )
    
    async def scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        status_message = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_file = await scanner.scan_document()
            
            if scan_file and scan_file.exists():
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                with open(scan_file, 'rb') as file:
                    await update.message.reply_document(
                        document=file,
                        filename=scan_file.name,
                        caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω\nüïê {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –º–µ–Ω—é
                await status_message.delete()
                await update.message.reply_text(
                    "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self._get_main_keyboard()
                )
                
                logger.info(f"–§–∞–π–ª {scan_file.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            else:
                await status_message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞.",
                    reply_markup=self._get_main_keyboard()
                )
                
        except ScannerError as e:
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        except Exception as e:
            await status_message.edit_text(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–µ—Ä–∞
            status = await scanner.get_scanner_status()
            
            status_emoji = {
                "ready": "‚úÖ",
                "not_initialized": "‚ö†Ô∏è",
                "error": "‚ùå"
            }.get(status["status"], "‚ùì")
            
            status_text = f"""
{status_emoji} *–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞*

*–°–æ—Å—Ç–æ—è–Ω–∏–µ:* {status["message"]}
*–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* {status.get("device", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
*–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:* {status.get("dpi", config.SCAN_DPI)} DPI
*–†–µ–∂–∏–º:* {status.get("mode", config.SCAN_MODE)}
*–§–æ—Ä–º–∞—Ç:* {status.get("format", config.SCAN_FORMAT)}

*–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–æ–≤:* `{config.SCAN_DIR}`
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:* {len(list(config.SCAN_DIR.glob("*"))) if config.SCAN_DIR.exists() else 0}
            """
            
            await update.message.reply_text(
                status_text, 
                parse_mode='Markdown',
                reply_markup=self._get_main_keyboard()
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def cleanup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        try:
            cleaned_count = await self._cleanup_old_files()
            
            if cleaned_count > 0:
                result_text = f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}"
            else:
                result_text = "‚ú® –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã!\n\n–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                
            await update.message.reply_text(
                result_text,
                reply_markup=self._get_main_keyboard()
            )
                
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –æ—á–∏—Å—Ç–∫—É: —É–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}",
                reply_markup=self._get_main_keyboard()
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self._is_authorized(user_id):
            return
        
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=self._get_main_keyboard()
        )
    
    async def _cleanup_old_files(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not config.SCAN_DIR.exists():
                return 0
            
            cutoff_time = datetime.now() - timedelta(hours=config.CLEANUP_AFTER_HOURS)
            cleaned_count = 0
            
            for file_path in config.SCAN_DIR.glob("*"):
                if file_path.is_file():
                    file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
                    if file_time < cutoff_time:
                        file_path.unlink()
                        cleaned_count += 1
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
            
            return cleaned_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            raise
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞
            await scanner.initialize()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
            cleanup_task = asyncio.create_task(self._auto_cleanup_task())
            
            try:
                # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
                await self.application.run_polling(drop_pending_updates=True)
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
                cleanup_task.cancel()
                try:
                    await cleanup_task
                except asyncio.CancelledError:
                    pass
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def _auto_cleanup_task(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        while True:
            try:
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                cleaned_count = await self._cleanup_old_files()
                if cleaned_count > 0:
                    logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = ScanBot() 