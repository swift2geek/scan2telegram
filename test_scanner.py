#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞
–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å HP Color LaserJet Pro MFP M177fw
"""

import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

import asyncio
import sane
from scanner import HPScanner, ScannerError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_sane_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SANE"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SANE...")
    
    try:
        sane.init()
        print("‚úÖ SANE —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        devices = sane.get_devices()
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        for i, device in enumerate(devices):
            print(f"  {i+1}. {device[0]} - {device[1]} ({device[2]})")
        
        if not devices:
            print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        sane.exit()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SANE: {e}")
        return False

async def test_hp_scanner():
    """–¢–µ—Å—Ç HP —Å–∫–∞–Ω–µ—Ä–∞"""
    print("\nüñ®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HP —Å–∫–∞–Ω–µ—Ä–∞...")
    
    try:
        scanner = HPScanner()
        await scanner.initialize()
        print("‚úÖ HP —Å–∫–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = await scanner.get_scanner_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞: {status}")
        
        scanner.cleanup()
        return True
        
    except ScannerError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HP —Å–∫–∞–Ω–µ—Ä–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_scan_operation():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Å–∫–∞–Ω–µ—Ä–µ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç!")
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    
    try:
        scanner = HPScanner()
        await scanner.initialize()
        
        print("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        scan_file = await scanner.scan_document()
        
        if scan_file and scan_file.exists():
            file_size = scan_file.stat().st_size / 1024  # KB
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω: {scan_file}")
            print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                from PIL import Image
                img = Image.open(scan_file)
                width, height = img.size
                print(f"üñºÔ∏è  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
                img.close()
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            
            return True
        else:
            print("‚ùå –§–∞–π–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
    except ScannerError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    finally:
        try:
            scanner.cleanup()
        except:
            pass

def check_system_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = {
        'sane': 'python-sane',
        'PIL': 'Pillow',
        'telegram': 'python-telegram-bot'
    }
    
    missing = []
    
    for module, package in dependencies.items():
        try:
            __import__(module)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing.append(package)
    
    if missing:
        print(f"\n‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing)}")
        return False
    
    return True

def check_scanner_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–∞–Ω–µ—Ä—É"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
    
    import os
    import grp
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        groups = [grp.getgrgid(g).gr_name for g in os.getgroups()]
        print(f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getenv('USER')}")
        print(f"üë• –ì—Ä—É–ø–ø—ã: {', '.join(groups)}")
        
        required_groups = ['scanner', 'lp']
        missing_groups = [g for g in required_groups if g not in groups]
        
        if missing_groups:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã: {', '.join(missing_groups)}")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo usermod -a -G scanner,lp $USER")
            print("–ó–∞—Ç–µ–º –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp scanner")
            return False
        else:
            print("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    tests = [
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_system_dependencies),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", check_scanner_permissions),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SANE", test_sane_initialization),
        ("HP —Å–∫–∞–Ω–µ—Ä", test_hp_scanner),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}...")
        print("-" * 30)
        
        if asyncio.iscoroutinefunction(test_func):
            result = await test_func()
        else:
            result = test_func()
        
        results.append((test_name, result))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print(f"\nüìã –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("-" * 30)
    
    if all(result for _, result in results):
        while True:
            choice = input("–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è? (y/n): ").lower()
            if choice == 'y':
                scan_result = await test_scan_operation()
                results.append(("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", scan_result))
                break
            elif choice == 'n':
                break
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<25} {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
    
    print("=" * 50)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 